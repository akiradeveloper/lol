syntax = "proto3";

package lol_core;

message ApplyReq {
  bytes message = 1;
  bool mutation = 2;
}
message CommitReq {
  bytes message = 1;
}
message LowLevelApplyReq {
  bool core = 1;
  bytes message = 2;
  bool mutation = 3;
}
message LowLevelCommitReq {
  bool core = 1;
  bytes message = 2;
}
message ApplyRep {
  bytes message = 1;
}
message CommitRep {}
message AppendStreamHeader {
  string sender_id = 1;
  uint64 prev_log_term = 2;
  uint64 prev_log_index = 3;
}
message AppendStreamEntry {
  uint64 term = 1;
  uint64 index = 2;
  bytes command = 3;
}
message AppendEntryReq {
  oneof elem {
    AppendStreamHeader header = 1;
    AppendStreamEntry entry = 2;
  }
}
message AppendEntryRep {
  bool success = 1;
  uint64 last_log_index = 2;
}
message GetSnapshotReq {
  uint64 index = 1;
}
message GetSnapshotRep {
  bytes chunk = 1;
}
message RequestVoteReq {
  uint64 term = 1;
  string candidate_id = 2;
  uint64 last_log_term = 3;
  uint64 last_log_index = 4;
  bool force_vote = 5;
  bool pre_vote = 6;
}
message RequestVoteRep {
  bool vote_granted = 1;
}
message HeartbeatReq {
  uint64 term = 1;
  string leader_id = 2;
  uint64 leader_commit = 3;
}
message HeartbeatRep {}
message TimeoutNowReq {}
message TimeoutNowRep {}
message AddServerReq {
  string id = 1;
}
message AddServerRep {}
message RemoveServerReq {
  string id = 1;
}
message RemoveServerRep {}
message TuneConfigReq {
  optional uint64 compaction_interval_sec = 1;
}
message TuneConfigRep {}
message GetConfigReq {}
message GetConfigRep {
  uint64 compaction_interval_sec = 1;
}
message ClusterInfoReq {}
message ClusterInfoRep {
  optional string leader_id = 1;
  repeated string membership = 2;
}

message StatusReq {}
message StatusRep {
  uint64 snapshot_index = 1;
  uint64 last_applied = 2;
  uint64 commit_index = 3;
  uint64 last_log_index = 4;
}

service Raft {
  rpc RequestVote (RequestVoteReq) returns (RequestVoteRep);
  rpc SendAppendEntry (stream AppendEntryReq) returns (AppendEntryRep);
  rpc GetSnapshot (GetSnapshotReq) returns (stream GetSnapshotRep);
  rpc RequestApply (ApplyReq) returns (ApplyRep);
  rpc RequestCommit (CommitReq) returns (CommitRep);
  rpc LowLevelRequestApply (LowLevelApplyReq) returns (ApplyRep);
  rpc LowLevelRequestCommit (LowLevelCommitReq) returns (CommitRep);
  rpc SendHeartbeat (HeartbeatReq) returns (HeartbeatRep);
  rpc TimeoutNow (TimeoutNowReq) returns (TimeoutNowRep);
  rpc AddServer (AddServerReq) returns (AddServerRep);
  rpc RemoveServer (RemoveServerReq) returns (RemoveServerRep);
  rpc TuneConfig (TuneConfigReq) returns (TuneConfigRep);
  rpc GetConfig (GetConfigReq) returns (GetConfigRep);
  rpc RequestClusterInfo (ClusterInfoReq) returns (ClusterInfoRep);
  rpc Status (StatusReq) returns (StatusRep);
}