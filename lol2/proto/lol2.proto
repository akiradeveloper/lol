syntax = "proto3";

import "google/protobuf/empty.proto";

package lol2;

message WriteRequest {
  uint32 lane_id = 1;
  bytes message = 2;
  // unique identifier of this request
  // duplicated requests with the same unique identifier are only executed once.
  string request_id = 3;
}

message ReadRequest {
  uint32 lane_id = 1;
  bytes message = 2;
}

message Response {
  bytes message = 1;
}

message Clock {
  uint64 term = 1;
  uint64 index = 2;
}

message KernRequest {
  uint32 lane_id = 1;
  bytes message = 2;
}

message ReplicationStreamHeader {
  uint32 lane_id = 1;
  string sender_id = 2;
  Clock prev_clock = 3;
}
message ReplicationStreamEntry {
  Clock clock = 1;
  bytes command = 2;
}
message ReplicationStreamChunk {
  oneof elem {
    ReplicationStreamHeader header = 1;
    ReplicationStreamEntry entry = 2;
  }
}

message ReplicationStreamResponse {
  uint64 n_inserted = 1;
  uint64 log_last_index = 2;
}

message GetSnapshotRequest {
  uint32 lane_id = 1;
  uint64 index = 2;
}

message SnapshotChunk {
  bytes data = 1;
}

message VoteRequest {
  uint32 lane_id = 1;
  uint64 vote_term = 2;
  string candidate_id = 3;
  Clock candidate_clock = 4;
  bool force_vote = 5;
  bool pre_vote = 6;
}

message VoteResponse {
  bool vote_granted = 1;
}

message Heartbeat {
  uint32 lane_id = 1;
  uint64 leader_term = 2;
  string leader_id = 3;
  uint64 leader_commit_index = 4;
}

message AddServerRequest {
  uint32 lane_id = 1;
  string server_id = 2;
}

message RemoveServerRequest {
  uint32 lane_id = 1;
  string server_id = 2;
}

message TimeoutNowRequest {
  uint32 lane_id = 1;
}

service Raft {
  rpc Write(WriteRequest) returns (Response);
  rpc Read(ReadRequest) returns (Response);
  rpc ProcessKernRequest (KernRequest) returns (google.protobuf.Empty);
  rpc RequestVote (VoteRequest) returns (VoteResponse);
  rpc AddServer (AddServerRequest) returns (google.protobuf.Empty);
  rpc RemoveServer (RemoveServerRequest) returns (google.protobuf.Empty);
  rpc SendReplicationStream (stream ReplicationStreamChunk) returns (ReplicationStreamResponse);
  rpc GetSnapshot (GetSnapshotRequest) returns (stream SnapshotChunk);
  rpc SendHeartbeat (Heartbeat) returns (google.protobuf.Empty);
  rpc TimeoutNow (TimeoutNowRequest) returns (google.protobuf.Empty);
}